# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w86hOE5a_l_6KYVAomjfyuwkj4_FD6m2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('weatherAUS.csv')

df.head()

df.isnull().sum()

df.describe()

df=df.drop(["Date","Evaporation", "Sunshine", "Cloud3pm", "Cloud9am","RISK_MM"], axis=1)

x=df.drop("RainTomorrow", axis=1)
y=df["RainTomorrow"]

y=y.values.reshape(-1,1)

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan, strategy='most_frequent')
x=imputer.fit_transform(x)
y=imputer.fit_transform(y)

print(x)

print(y)

df.head()

from sklearn.preprocessing import LabelEncoder
le1 = LabelEncoder()
x[:,0] = le1.fit_transform(x[:,0])
le2 = LabelEncoder()
x[:,4] = le2.fit_transform(x[:,4])
le3 = LabelEncoder()
x[:,6] = le3.fit_transform(x[:,6])
le4 = LabelEncoder()
x[:,7] = le4.fit_transform(x[:,7])
le5 = LabelEncoder()
x[:,-1] = le5.fit_transform(x[:,-1])
le6 = LabelEncoder()
y[:,-1] = le6.fit_transform(y[:,-1])

print(x)

print(y)

y = np.array(y,dtype=float)
print(y)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x=sc.fit_transform(x)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100,random_state=0)
classifier.fit(x_train,y_train)

classifier.score(x_train,y_train)

y_pred = classifier.predict(x_test)

print(y_pred)

print(y_train)

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()